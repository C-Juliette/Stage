p <- ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
animate(p, renderer = gifski_renderer())
library("gifski")
library("gifski")
install.packages("gifski")
library(gganimate)
p <- ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
animate(p, renderer = gifski_renderer())
ggplot(economics) +
geom_line(aes(x = date, y = unemploy))
library(gganimate)
p <- ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
animate(p, renderer = gifski_renderer())
ggplot(mpg) +
geom_bar(aes(x = factor(cyl)))
ggplot(mpg) +
geom_bar(aes(x = factor(cyl))) +
labs(title = 'Number of cars in {closest_state} by number of cylinders') +
transition_states(states = year) +
enter_grow() +
exit_fade()
ggplot(mpg) +
geom_bar(aes(x = factor(cyl)))
p <- ggplot(mpg) +
geom_bar(aes(x = factor(cyl))) +
labs(title = 'Number of cars in {closest_state} by number of cylinders') +
transition_states(states = year) +
enter_grow() +
exit_fade()
animate(p, renderer = gifski_renderer())
foo <- function() "something complicted"
library(testthat)
testthat("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
library(testthat)
testthat("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
packageDescription("testthat)
)
z
""
"
packageDescription("testthat")
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
foo <- function() "something complicted"
library(testthat)
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
packageDescription("testthat")
local_edition(3)
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
testthat::test_file()
setwd("~/Desktop")
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
#local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
packageDescription("testthat")
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
packageDescription("testthat")
library(shiny)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shinyapp
source("~/Desktop/shiny_onemoretime.R", echo=TRUE)
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
textOutput("greeting")
)
server <- function(input, output, session) {
output$greeting <- renderText({
paste0("Hello ", input$name)
})
}
shinyApp(ui, server)
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
ui <- fluidPage(
sliderInput("x", label = "If x is", min = 1, max = 50, value = 30),
sliderInput("x", label = "and y is", min = 1, max = 50, value = 30),
"then x times y is",
textOutput("product")
)
server <- function(input, output, session) {
output$product <- renderText({
input$x * input$y
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("x", label = "If x is", min = 1, max = 50, value = 30),
sliderInput("y", label = "and y is", min = 1, max = 50, value = 30),
"then x times y is",
textOutput("product")
)
server <- function(input, output, session) {
output$product <- renderText({
input$x * input$y
})
}
shinyApp(ui, server)
?get
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
x <- reactive({
get(input$x)
})
x
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
server <- function(input, output, session) {
x <- reactive({
get(input$x)
})
y <- reactive({
get(input$y)
})
output$product <- renderText({
product <- x
product
})
output$product_plus5 <- renderText({
product <- x * y
product + 5
})
output$product_plus10 <- renderText({
product <- x * y
product + 10
})
}
shinyApp(ui, server)
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
datasets <- c("economics", "faithfuld", "seals")
ui <- fluidPage(
selectInput("dataset", "Dataset", choices = 'datasets'),
verbatimTextOutput("summary"),
tableOutput("plot")
)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset())
}, res = 96)
}
shinyApp(ui, server)
datasets <- c("economics", "faithfuld", "seals")
ui <- fluidPage(
selectInput("dataset", "Dataset", choices = 'economics'),
verbatimTextOutput("summary"),
tableOutput("plot")
)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset())
}, res = 96)
}
shinyApp(ui, server)
datasets <- c("economics", "faithfuld", "seals")
ui <- fluidPage(
selectInput("dataset", "Dataset", choices = 'economics'),
verbatimTextOutput("summary"),
tableOutput("plot")
)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset())
}, res = 96)
}
shinyApp(ui, server)
runApp('shiny_onemoretime.R')
library(shiny); runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
?radioButtons
?textInput
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "tabBoxes"),
dashboardSidebar(),
body
),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
library(shinydashboard)
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
library(shiny)
library(shinydashboard)
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "tabBoxes"),
dashboardSidebar(),
body
),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
box(h3("Theoritical density and a realization on a matrix"))
),
tabPanel("Tab2", "Tab content 2")
)
)
)
box(h3("Theoritical density and a realization on a matrix")
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected"),
box(h3("Theoritical density and a realization on a matrix"))
),
tabPanel("Tab2", "Tab content 2")
)
)
)
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "tabBoxes"),
dashboardSidebar(),
body
),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
box(h3("Theoritical density and a realization on a matrix")
tabPanel("Tab2", "Tab content 2")
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected"),
box(h3("Theoritical density and a realization on a matrix"))
),
tabPanel("Tab2", "Tab content 2")
)
)
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "tabBoxes"),
dashboardSidebar(),
body
),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
