geom_bar(aes(y = manufacturer)) +
facet_grid(class ~ .)
ggplot(mpg) +
geom_bar(aes(y = manufacturer, fill = manufacturer)) +
facet_grid(class ~ ., space = 'free_y', scales = 'free_y')
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(year ~ drv)
facet_wrap(~ drv + year
ggplot(mpg) +
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(year ~ drv)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap( ~ drv + year)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap( ~ drv + year)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = displ)) +
facet_wrap( ~ drv + year)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = hwy)) +
facet_grid(year ~ drv)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = hwy)) +
facet_grid(year ~ drv)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = displ)) +
facet_wrap( ~ drv + year)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(year ~ drv)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap( ~ drv + year)
ggplot(mpg) +
geom_bar(aes(x = class)) +
coord_polar()
ggplot(mpg) +
geom_bar(aes(x = class, color = class)) +
coord_polar()
ggplot(mpg) +
geom_bar(aes(x = class, fill = class)) +
coord_polar()
ggplot(mpg) +
geom_bar(aes(x = class, fill = class)) +
coord_polar(theta = 'y') +
expand_limits(y = 70)
ggplot(mpg) +
geom_bar(aes(x = class)) +
scale_y_continuous(limits = c(0, 40))
ggplot(mpg) +
geom_bar(aes(x = class)) +
coord_cartesian(ylim = c(0, 40))
ggplot(mpg) +
geom_point(aes(x = hwy, y = displ))
ggplot(mpg) +
geom_point(aes(x = hwy, y = displ)) +
scale_y_continuous(trans = 'log')
ggplot(mpg) +
geom_point(aes(x = hwy, y = displ))
ggplot(mpg) +
geom_point(aes(x = hwy, y = displ)) +
scale_y_continuous(trans = 'log')
ggplot(mpg) +
geom_point(aes(x = hwy, y = displ))
ggplot(mpg) +
geom_point(aes(x = hwy, y = displ)) +
scale_y_continuous(trans = 'log')
ggplot(mpg) +
geom_point(aes(x = hwy, y = displ)) +
coord_trans(y = 'log')
# Get the borders of all countries
world <- sf::st_as_sf(maps::map('world', plot = FALSE, fill = TRUE))
install.packages("sf")
# Get the borders of all countries
world <- sf::st_as_sf(maps::map('world', plot = FALSE, fill = TRUE))
install.packages("maps")
# Get the borders of all countries
world <- sf::st_as_sf(maps::map('world', plot = FALSE, fill = TRUE))
world <- sf::st_wrap_dateline(world,
options = c("WRAPDATELINE=YES", "DATELINEOFFSET=180"),
quiet = TRUE)
# Plot code
ggplot(world) +
geom_sf() +
coord_sf(crs = "+proj=moll")
ggplot(mpg) +
geom_bar(aes(y = class)) +
facet_wrap(~year) +
theme_minimal()
ggplot(mpg) +
geom_bar(aes(y = class)) +
facet_wrap(~year) +
labs(title = "Number of car models per class",
caption = "source: http://fueleconomy.gov",
x = NULL,
y = NULL) +
scale_x_continuous(expand = c(0, NA)) +
theme_minimal() +
theme(
text = element_text('Avenir Next Condensed'),
strip.text = element_text(face = 'bold', hjust = 0),
plot.caption = element_text(face = 'italic'),
panel.grid.major = element_line('white', size = 0.5),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
panel.ontop = TRUE
)
ggplot(mpg) +
geom_bar(aes(y = class, fill = drv)) +
facet_wrap(~year) +
labs(title = "Number of car models per class",
caption = "source: http://fueleconomy.gov",
x = 'Number of cars',
y = NULL)
library(ggrepel)
p1 <- ggplot(msleep) +
geom_boxplot(aes(x = sleep_total, y = vore, fill = vore))
p1
p2 <- ggplot(msleep) +
geom_bar(aes(y = vore, fill = vore))
p2
p3 <- ggplot(msleep) +
geom_point(aes(x = bodywt, y = sleep_total, colour = vore)) +
scale_x_log10()
p3
library(patchwork)
p1 + p2 + p3
(p1 | p2) /
p3
p_all <- (p1 | p2) /
p3
p_all + plot_layout(guides = 'collect')
p_all & theme(legend.position = 'none')
p_all <- p_all & theme(legend.position = 'none')
p_all + plot_annotation(
title = 'Mammalian sleep patterns',
tag_levels = 'A'
)
p <- ggplot(mtcars) +
geom_point(aes(x = disp, y = mpg))
p + p + p
p1 <- ggplot(mtcars[mtcars$gear == 3,]) +
geom_point(aes(x = disp, y = mpg))
p2 <- ggplot(mtcars[mtcars$gear == 4,]) +
geom_point(aes(x = disp, y = mpg))
p1 + p2
p1 <- ggplot(mtcars) +
geom_point(aes(x = disp, y = mpg))
p2 <- ggplot(mtcars) +
geom_bar(aes(x = factor(gear)))
p3 <- ggplot(mtcars) +
geom_boxplot(aes(x = factor(gear), y = mpg))
layout <- '
AA#
#BB
C##
'
p1 + p2 + p3 + plot_layout(design = layout)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy))
library(gganimate)
install.packages("gganimate")
ggplot(economics) +
geom_line(aes(x = date, y = unemploy))
library(gganimate)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
ggplot(mpg) +
geom_bar(aes(x = factor(cyl)))
ggplot(mpg) +
geom_bar(aes(x = factor(cyl))) +
labs(title = 'Number of cars in {closest_state} by number of cylinders') +
transition_states(states = year) +
enter_grow() +
exit_fade()
p + p + p + plot_layout(width = c(1, 2, 1))
p <- ggplot(mtcars) +
geom_point(aes(x = disp, y = mpg))
p + p + p + plot_layout(width = c(1, 2, 1))
p + p + p + plot_layout(width = unit(c(5, 1, 1), c('cm', 'null', 'null' )))
p + p + p + plot_layout(width = unit(c(8, 1, 1), c('cm', 'null', 'null')))
p <- ggplot(mtcars) +
geom_point(aes(x = disp, y = mpg))
p + p + p + plot_layout(width = c(1, 2, 1))
p + p + p + plot_layout(width = unit(c(8, 1, 1), c('cm', 'null', 'null')))
p + p + p + plot_layout(width = unit(c(5, 1, 1), c('cm', 'null', 'null')))
p <- ggplot(mtcars) +
geom_point(aes(x = disp, y = mpg))
p + p + p + plot_layout(width = c(1, 2, 1))
p + p + p + plot_layout(width = unit(c(8, 1, 1), c('cm', 'null', 'null')))
p1 + p2 & scale_y_continuous(limits = c(10, 40))
p1 <- ggplot(mtcars[mtcars$gear == 3,]) +
geom_point(aes(x = disp, y = mpg))
p2 <- ggplot(mtcars[mtcars$gear == 4,]) +
geom_point(aes(x = disp, y = mpg))
p1 + p2 & scale_y_continuous(limits = c(10, 40))
p1 <- ggplot(mtcars) +
geom_point(aes(x = disp, y = mpg))
p2 <- ggplot(mtcars) +
geom_bar(aes(x = factor(gear)))
p3 <- ggplot(mtcars) +
geom_boxplot(aes(x = factor(gear), y = mpg))
layout <- '
AA#
#BB
C##
'
p1 + p2 + p3 + plot_layout(design = layout)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy))
library(gganimate)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy))
library(gganimate)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
library(gganimate)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
setwd("~/Desktop/ggplot2_workshop-master")
ggplot(economics) +
geom_line(aes(x = date, y = unemploy))
library(gganimate)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
library(gganimate)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
library(gganimate)
p <- ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
animate(p, renderer = gifski_renderer())
library("gifski")
library("gifski")
install.packages("gifski")
library(gganimate)
p <- ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
animate(p, renderer = gifski_renderer())
ggplot(economics) +
geom_line(aes(x = date, y = unemploy))
library(gganimate)
p <- ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
animate(p, renderer = gifski_renderer())
ggplot(mpg) +
geom_bar(aes(x = factor(cyl)))
ggplot(mpg) +
geom_bar(aes(x = factor(cyl))) +
labs(title = 'Number of cars in {closest_state} by number of cylinders') +
transition_states(states = year) +
enter_grow() +
exit_fade()
ggplot(mpg) +
geom_bar(aes(x = factor(cyl)))
p <- ggplot(mpg) +
geom_bar(aes(x = factor(cyl))) +
labs(title = 'Number of cars in {closest_state} by number of cylinders') +
transition_states(states = year) +
enter_grow() +
exit_fade()
animate(p, renderer = gifski_renderer())
foo <- function() "something complicted"
library(testthat)
testthat("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
library(testthat)
testthat("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
packageDescription("testthat)
)
z
""
"
packageDescription("testthat")
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
foo <- function() "something complicted"
library(testthat)
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
packageDescription("testthat")
local_edition(3)
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
testthat::test_file()
setwd("~/Desktop")
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
#local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
packageDescription("testthat")
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
test_that("foo works", {
local_edition(3)
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
packageDescription("testthat")
library(shiny)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shinyapp
source("~/Desktop/shiny_onemoretime.R", echo=TRUE)
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
textOutput("greeting")
)
server <- function(input, output, session) {
output$greeting <- renderText({
paste0("Hello ", input$name)
})
}
shinyApp(ui, server)
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
ui <- fluidPage(
sliderInput("x", label = "If x is", min = 1, max = 50, value = 30),
sliderInput("x", label = "and y is", min = 1, max = 50, value = 30),
"then x times y is",
textOutput("product")
)
server <- function(input, output, session) {
output$product <- renderText({
input$x * input$y
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("x", label = "If x is", min = 1, max = 50, value = 30),
sliderInput("y", label = "and y is", min = 1, max = 50, value = 30),
"then x times y is",
textOutput("product")
)
server <- function(input, output, session) {
output$product <- renderText({
input$x * input$y
})
}
shinyApp(ui, server)
?get
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
x <- reactive({
get(input$x)
})
x
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
server <- function(input, output, session) {
x <- reactive({
get(input$x)
})
y <- reactive({
get(input$y)
})
output$product <- renderText({
product <- x
product
})
output$product_plus5 <- renderText({
product <- x * y
product + 5
})
output$product_plus10 <- renderText({
product <- x * y
product + 10
})
}
shinyApp(ui, server)
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
runApp('shiny_onemoretime.R')
datasets <- c("economics", "faithfuld", "seals")
ui <- fluidPage(
selectInput("dataset", "Dataset", choices = 'datasets'),
verbatimTextOutput("summary"),
tableOutput("plot")
)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset())
}, res = 96)
}
shinyApp(ui, server)
datasets <- c("economics", "faithfuld", "seals")
ui <- fluidPage(
selectInput("dataset", "Dataset", choices = 'economics'),
verbatimTextOutput("summary"),
tableOutput("plot")
)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset())
}, res = 96)
}
shinyApp(ui, server)
datasets <- c("economics", "faithfuld", "seals")
ui <- fluidPage(
selectInput("dataset", "Dataset", choices = 'economics'),
verbatimTextOutput("summary"),
tableOutput("plot")
)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset())
}, res = 96)
}
shinyApp(ui, server)
runApp('shiny_onemoretime.R')
